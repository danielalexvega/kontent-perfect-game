/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: âš¾ Perfect Game
 * Environment: Production
 * Id: 9609eaef-6582-007e-452c-3b671b800257
 * 
 * -------------------------------------------------------------------------------
 */


            import type { TypeCodenames } from '../system/types.generated.js';
import type { Elements, IContentItem } from '@kontent-ai/delivery-sdk';
import type { AddressType } from '../types/address-type.generated.js';
import type { CollectionCodenames } from '../system/collections.generated.js';
import type { CoreType } from '../system/types.generated.js';
import type { LanguageCodenames } from '../system/languages.generated.js';
import type { LinkType } from '../types/link-type.generated.js';
import type { RoleTaxonomyTermCodenames, RoleTaxonomyCodename } from '../taxonomies/role-taxonomy.generated.js';
import type { WorkflowCodenames, WorkflowStepCodenames } from '../system/workflows.generated.js';
           
            /*
* Type representing codename of 'Person' type
*/
            export type PersonTypeCodename = keyof Pick<Record<TypeCodenames, null>, "person_1de89584e">;

            /*
* Typeguard for codename of 'Person' type
*/
            export function isPersonTypeCodename(value: string | undefined | null): value is PersonTypeCodename {
                return typeof value === 'string' && value === ('person_1de89584e' satisfies PersonTypeCodename);
            }

/*
    * Person
    *
    * Id: d43f8c15-16cd-5732-b2f7-2023997187fc
* Codename: person_1de89584e
* External Id: caf16bfa-1b37-4ae7-83f1-879afceee5c8
    */
export type PersonType = IContentItem<
{
/*
    * First Name
    *
    * Codename: first_name
* Id: 75123355-ea53-5577-9c1a-36d3747bc70d
* External Id: 33034d89-23b3-4a5b-b84d-bdff217aea50
* Type: text
* Required: true
    */
                readonly first_name: Elements.TextElement;

/*
    * Last Name
    *
    * Codename: last_name
* Id: 7cf10c8c-a512-5610-ae33-31031ab78cde
* External Id: 684bf369-7ac1-441b-9ca5-6f4a3e629a61
* Type: text
* Required: true
    */
                readonly last_name: Elements.TextElement;

/*
    * Prefix
    *
    * Codename: prefix
* Id: a4308aff-84ae-5d96-9f1f-5010be8a5278
* External Id: 7d7406b4-23ec-4da1-8789-adb0be5fcd59
* Type: text
* Required: false
    */
                readonly prefix: Elements.TextElement;

/*
    * Biography
    *
    * Codename: biography
* Id: 091dac7c-3af2-5c43-9833-1b1da253cea8
* External Id: 83d988b8-196d-40ad-9aca-61001d077624
* Type: rich_text
* Required: false
    */
                readonly biography: Elements.RichTextElement<CoreType>;

/*
    * Image
    *
    * Codename: image
* Id: 891ea65d-96ab-5530-a363-0cb6109554f2
* External Id: 7f66b8b5-eb9d-4acb-9efa-81bd0d65007e
* Type: asset
* Required: false
    */
                readonly image: Elements.AssetsElement;

/*
    * Job Title
    *
    * Codename: job_title
* Id: e63e755f-29ce-5c45-9289-365bd7e47adf
* External Id: e6d90337-88eb-4f93-acc9-9be0d9898fed
* Type: text
* Required: false
    */
                readonly job_title: Elements.TextElement;

/*
    * Role
    *
    * Codename: role
* Id: 6ed7274d-5f48-4ee8-bc6c-562957b14832
* Type: taxonomy
* Required: false
* Taxonomy: role
    */
                readonly role: Elements.TaxonomyElement<RoleTaxonomyTermCodenames, RoleTaxonomyCodename>;

/*
    * Email
    *
    * Codename: email
* Id: b1c7b88a-74e4-5b67-8f39-74a1c12ba316
* External Id: 714ada0f-6556-4e8d-b2cf-1b63439bf383
* Type: text
* Required: false
    */
                readonly email: Elements.TextElement;

/*
    * Phone
    *
    * Codename: phone
* Id: 97beeda1-f092-5780-9279-4049ff22f3ad
* External Id: 3b2f3a8e-5546-4f5c-8f82-89f59f7eb78e
* Type: text
* Required: false
    */
                readonly phone: Elements.TextElement;

/*
    * Address
    *
    * Codename: address
* Id: a41e90d0-58f3-5508-9b91-39adac32cfcb
* External Id: 7e44660d-4238-4acb-80a5-ae3fd083081d
* Type: modular_content
* Required: false
* Allowed content types: address
    */
                readonly address: Elements.LinkedItemsElement<AddressType>;

/*
    * Website
    *
    * Codename: website
* Id: b6ccc50c-692b-5b54-a078-e3ba8e4d6f42
* External Id: 947991d3-29e1-4551-9c50-ee7501b29d7b
* Type: modular_content
* Required: false
* Allowed content types: link_a0dbe3d92
    */
                readonly website: Elements.LinkedItemsElement<LinkType>;}, 
PersonTypeCodename, LanguageCodenames, CollectionCodenames, WorkflowCodenames, WorkflowStepCodenames>

/*
* Type representing all available element codenames for Person
*/
export type PersonTypeElementCodenames = 'first_name' | 'last_name' | 'prefix' | 'biography' | 'image' | 'job_title' | 'role' | 'email' | 'phone' | 'address' | 'website';;

/*
    * Type guard for Person
    *
    * Id: d43f8c15-16cd-5732-b2f7-2023997187fc
* Codename: person_1de89584e
* External Id: caf16bfa-1b37-4ae7-83f1-879afceee5c8
    */
export function isPersonType(item: IContentItem | undefined | null): item is PersonType {
                return item?.system.type === ('person_1de89584e' satisfies PersonTypeCodename);
            };



            