/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: âš¾ Perfect Game
 * Environment: Production
 * Id: 9609eaef-6582-007e-452c-3b671b800257
 * 
 * -------------------------------------------------------------------------------
 */


            import type { EventNavigationType } from '../types/event-navigation-type.generated.js';
import type { CallToActionType } from '../types/call-to-action-type.generated.js';
import type { EventType } from '../types/event-type.generated.js';
import type { PlayerType } from '../types/player-type.generated.js';
import type { PageType } from '../types/page-type.generated.js';
import type { ImageType } from '../types/image-type.generated.js';
import type { LinkType } from '../types/link-type.generated.js';
import type { VideoType } from '../types/video-type.generated.js';
import type { NavigationType } from '../types/navigation-type.generated.js';
import type { EventInformationType } from '../types/event-information-type.generated.js';
import type { ContactType } from '../types/contact-type.generated.js';
import type { AddressType } from '../types/address-type.generated.js';
import type { PersonType } from '../types/person-type.generated.js';
import type { OrganizationType } from '../types/organization-type.generated.js';
import type { TagType } from '../types/tag-type.generated.js';
import type { LandingPageType } from '../types/landing-page-type.generated.js';
import type { TestimonialType } from '../types/testimonial-type.generated.js';
import type { RosterType } from '../types/roster-type.generated.js';
import type { ArticleType } from '../types/article-type.generated.js';
import type { ArticleLayoutType } from '../types/article-layout-type.generated.js';

            /*
* Array of all type codenames
*/
            export const typeCodenames = ['event_navigation', 'call_to_action', 'event', 'player', 'page', 'image', 'link_a0dbe3d92', 'video', 'navigation', 'event_information', 'contact', 'address', 'person_1de89584e', 'organization', 'tag', 'landing_page', 'testimonial', 'roster', 'article', 'article_layout'] as const;;
           
            /*
* Type representing all type codenames
*/
            export type TypeCodenames = typeof typeCodenames[number];;

            /*
* Typeguard for type codename
*/
            export function isTypeCodename(value: string | undefined | null): value is TypeCodenames {
                return typeof value === 'string' && (typeCodenames as readonly string[]).includes(value);
            };

					 /*
* Core content type with narrowed types. Use this instead of'IContentItem' for increased type safety.
*/
					 export type CoreType = EventNavigationType | CallToActionType | EventType | PlayerType | PageType | ImageType | LinkType | VideoType | NavigationType | EventInformationType | ContactType | AddressType | PersonType | OrganizationType | TagType | LandingPageType | TestimonialType | RosterType | ArticleType | ArticleLayoutType

					/*
* Type mapping for codename & type. Can be used for type safe access to type based on the codename of type.
*/
					export type CodenameTypeMapping = {
	readonly event_navigation: EventNavigationType,
readonly call_to_action: CallToActionType,
readonly event: EventType,
readonly player: PlayerType,
readonly page: PageType,
readonly image: ImageType,
readonly link_a0dbe3d92: LinkType,
readonly video: VideoType,
readonly navigation: NavigationType,
readonly event_information: EventInformationType,
readonly contact: ContactType,
readonly address: AddressType,
readonly person_1de89584e: PersonType,
readonly organization: OrganizationType,
readonly tag: TagType,
readonly landing_page: LandingPageType,
readonly testimonial: TestimonialType,
readonly roster: RosterType,
readonly article: ArticleType,
readonly article_layout: ArticleLayoutType,
};

					/*
* Helper type that returns type based on the codename of type.
*/
					export type CodenameTypeMapper<TTypeCodename extends TypeCodenames> = TTypeCodename extends keyof CodenameTypeMapping ? CodenameTypeMapping[TTypeCodename] : CoreType;
					